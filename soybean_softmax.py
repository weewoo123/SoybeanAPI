# -*- coding: utf-8 -*-
"""Copy of Copy of soybean softmax.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GNdSL9KA7-59ltVJbHncw3G5zwdNqJfK
"""

from google.colab import drive
drive.mount('/content/drive')

# Day prediction.

X = []
Y = []

from PIL import Image
from numpy import asarray
import os
import tensorflow as tf
import random
from keras.models import load_model
 
day_list = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 26, 28]

for i in day_list:
  strday = '/content/drive/Shareddrives/Soybean hydroponics/IMAGE ANALYSIS/annotated_images/Day ' + str(i)
  for j in range(40):
    fullstring = strday + '/Day ' + str(i) + '-' + str(j) + '.jpg'
    isExist = os.path.exists(fullstring)
    if isExist:
      X.append(tf.keras.preprocessing.image.img_to_array(tf.keras.utils.load_img(fullstring, target_size=(224, 224))))
      #img = Image.open(fullstring)
      #numpydata = asarray(img)
      #print(numpydata.shape)
      #X.append(numpydata)
      Y.append(i)


random.Random(1337).shuffle(X)
random.Random(1337).shuffle(Y)

len(X)

len(Y)

import numpy as np

len(np.unique(Y))

np.unique(Y)

for i in range(len(Y)):
  if Y[i] >= 9 and Y[i] <= 12:
    Y[i] = 0
  elif Y[i] >= 13 and Y[i] <= 16:
    Y[i] = 1
  elif Y[i] >= 17 and Y[i] <= 20:
    Y[i] = 2
  else:
    Y[i] = 3

X = np.array(X)
X = X.astype("float32") / 255

Y = np.array(Y)

import tensorflow
from tensorflow import keras
from keras import layers
inputs = keras.Input(shape=(224, 224, 3))
x = layers.Conv2D(filters=128, kernel_size=3, activation="relu")(inputs)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Conv2D(filters=8, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=2)(x)
x = layers.Flatten()(x)
#outputs = tensorflow.keras.backend.round(layers.Dense(1, activation="relu")(x))
outputs = layers.Dense(4, activation="softmax")(x)
model = keras.Model(inputs=inputs, outputs=outputs)

model.summary()

import numpy as np
model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.01), loss="sparse_categorical_crossentropy", metrics=["accuracy"])

#model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=0.01), loss="mean_squared_error", metrics=["mean_absolute_error"])

callbacks = [keras.callbacks.ModelCheckpoint(filepath="convnet_from_scratch.keras", save_best_only=True, monitor="val_loss")]

history = model.fit(X, Y, epochs=20, validation_split=0.2, callbacks=callbacks)

test_model = keras.models.load_model("convnet_from_scratch.keras")
test_loss, test_acc = test_model.evaluate(np.array(X), np.array(Y))
print(f"Test accuracy: {test_acc:.3f}")

import matplotlib.pyplot as plt
accuracy = history.history["accuracy"]
val_accuracy = history.history["val_accuracy"]
loss = history.history["loss"]
val_loss = history.history["val_loss"]
epochs = range(1, len(accuracy) + 1)
plt.plot(epochs, accuracy, "bo", label="Training accuracy")
plt.plot(epochs, val_accuracy, "b", label="Validation accuracy")
plt.title("Training and validation accuracy")
plt.legend()
plt.figure()
plt.plot(epochs, loss, "bo", label="Training loss")
plt.plot(epochs, val_loss, "b", label="Validation loss")
plt.title("Training and validation loss")
plt.legend()
plt.show()


model.save('soybeans.h5')